CS6380, Distributed Computing
Fall 2014
Project #2

Kenneth Platz
Brian Snedic
Joshua Olson

Attached is our submission for the Distributed Computing Project #2.  We
have included the following files:
    submit/
        Makefile              Makefile to create the executable
        doc/                  Directory of PDF files and documentation
            P2-graphs.pdf     Diagrams for the P2BS10_c and P2BS10_d cases
            P2KJP32_a.pdf     Diagram for the P2KJP32_a test case
                              Note: These diagrams do not show the complete
                              graph, just the MST within the graph.
        bin/                  Directory to hold the generated binary
        run/                  Directory for configuration and log files
            P2BS10_c.txt      10-node input file
            P2BS10_d.txt      Another 10-node input file
            P2KJP32_a.txt     32-node input file
            logfiles_P2BS10_c.tar.gz:
                Output files for sample execution of P2BS10_c.txt 
                P2BS10_c.out  Sample of stdout
                node??.log    Log file generated by individual nodes
            logfiles_P2BS10_d.tar.gz:
                Output files for sample execution of P2BS10_d.txt 
                P2BS10_d.out  Sample of stdout
                node??.log    Log file generated by individual nodes
            logfiles_P2KJP32_a.tar.gz:
                Output files for sample execution of P2KJP32_a.txt 
                P2KJP32_a.out Sample of stdout
                node??.log     Log file generated by individual nodes
        src/                   Directory for source files
            CS6380Project2.h   General header file for the project
            Edge.h             Header file to define an Edge class
            main.cpp           Source file for main() function
            Message.h          Header file to define a Message class
            Message.cpp        Implementation of message functions
            Node.h             Header file to define a Node class      
            Node.cpp           Implementation of Node::run(), and its ancillary
                               functions
            parse_config.cpp   Implements the parse_config() function
            
COMPILING
In order to compile the program, extract the files to a directory on either
CS1 or CS2, and execute:
 
    {cslinux2:~} cd submit
    {cslinux2:~/submit} make

INPUT FORMAT
The first line of the input file indicates the number of nodes to simulate <N>.
The second line of the input file contains the node ID's for each node.
Subsequent lines contain the adjacency matrix for our simulation:
    Each line will have <N> floating-point entries.  Entry i in row j indicates
        that an edge exists between node i and node j, and the weight of that
        edge.  An entry of 0 indicates that no such edge exists.
    
The program assumes that for all i and j, the value of i,j and the value
at j,i are identical.  If this does not hold, the results are unspecified.

EXECUTION
Change directory into the run directory and execute:

    {cslinux2:~/submit} cd run
    {cslinux2:~/submit/run} ../bin/CS6380Project2 P2BS10_c.txt

As the program executes, it will process a series of rounds.  As interesting
events occur (specifically a merge or absorb), these will be output to the
screen.  The program has been tuned so each round lasts 200ms.  You can
speedup or slow down the program by editing src/CS6380Project2.h and
changing the DELAY parameter, which is expressed in milliseconds.

With the configurations we have tested, the program requires approximately
500-600 rounds to complete.
